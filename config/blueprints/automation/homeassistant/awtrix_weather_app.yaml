##########
# This Blueprint is created by Smart Home Junkie
# (c) copyright 2023 by Smart Home Junkie. You may not copy, reproduce, distribute, transmit, modify, create derivative works,
# or in any other way exploit any part of copyrighted material without the prior written permission from Smart Home Junkie
##########

blueprint:
  name: Awtrix Weather App
  description: Show Weather on the Ulanzi Clock
  domain: automation
  author: Smart Home Junkie
  input:
    awtrix_displays:
      name: Awtrix Displays
      description: Select the target Awtrix displays.
      selector:
        device:
          integration: mqtt
          model: "AWTRIX Light"
          manufacturer: Blueforcer
          multiple: true
    toggle_helper:
      name: Toggle Helper
      description: Select the Toggle Helper that will toggle the App on or off.
      selector:
        entity:
          domain: input_boolean
    my_sensor:
      name: Sensor
      description: Select your Weather Sensor.
      selector:
        entity:
          domain: weather
    show_text:
      name: Show Weather Text
      description: Should the weather condition be shown as text?
      selector:
        boolean:
      default: true
    show_temperature:
      name: Show temperature
      description: Should the temperature be shown?
      selector:
        boolean:
      default: true
    show_windspeed:
      name: Show Wind Speed
      description: Should the wind speed be shown?
      selector:
        boolean:
      default: true
    show_humidity:
      name: Show Humidity
      description: Should the humidity be shown?
      selector:
        boolean:
      default: true
    push_icon:
      name: Push Icon
      description: Icon behavior
      selector:
        select:
          options:
            - label: "Icon doesn't move"
              value: "0"
            - label: "Icon moves with text and will not appear again"
              value: "1"
            - label: "Icon moves with text but appears again when the text starts"
              value: "2"
          mode: dropdown
      default: "2"
    text_case:
      name: Text Case
      description: Select how you would like your text to display.
      selector:
        select:
          options:
            - label: "Use global setting"
              value: "0"
            - label: "Force Uppercase"
              value: "1"
            - label: "Show as you entered it"
              value: "2"
          mode: dropdown
      default: "0"
    background_color:
      name: Background Color
      description: Select the Background color
      selector:
        color_rgb:
      default: [0, 0, 0]
    text_color:
      name: Text Color
      description: Select the Text color
      selector:
        color_rgb:
      default: [255, 255, 255]
    show_rainbow:
      name: Rainbow Colors
      description: Should the notification be shown in Rainbow colors?
      selector:
        boolean:
      default: false
    repeat:
      name: Repeat
      description: Sets how many times the text should be scrolled through the matrix before the app ends. If the value is -1, the duration will be taken into account instead.
      default: "-1"
    duration:
      name: Duration (in seconds)
      description: Sets how long the app should be displayed. 0 is global app time.
      default: "0"
    lifetime:
      name: Lifetime (in seconds)
      description: Sets how long the app should stay alive before it gets removed from the app cycle automatically. 0 is infinite lifetime.
      default: "0"
    switch_to_app:
      name: Switch to app on value change
      description: Should the clock switch to the app immediately when the value of the sensor changes?
      selector:
        boolean:
      default: false
    scroll:
      name: Scroll the notification?
      description: Enables text scrolling
      selector:
        boolean:
      default: true
    scrollspeed:
      name: Scroll Speed Percentage
      description: Modifies the scrollspeed. You need to enter a percentage value.
      selector:
        number:
          mode: slider
          min: 0
          max: 100
      default: 100
    effect:
      name: Effect
      description: Select a background effect (optional).
      selector:
        select:
          options:
            - label: "None"
              value: ""
            - label: "BrickBreaker"
              value: "BrickBreaker"
            - label: "Checkerboard"
              value: "Checkerboard"
            - label: "ColorWaves"
              value: "ColorWaves"
            - label: "Fireworks"
              value: "Fireworks"
            - label: "LookingEyes"
              value: "LookingEyes"
            - label: "Matrix"
              value: "Matrix"
            - label: "MovingLine"
              value: "MovingLine"
            - label: "PingPong"
              value: "PingPong"
            - label: "Pacifica"
              value: "Pacifica"
            - label: "Plasma"
              value: "Plasma"
            - label: "PlasmaCloud"
              value: "PlasmaCloud"
            - label: "Radar"
              value: "Radar"
            - label: "Ripple"
              value: "Ripple"
            - label: "Snake"
              value: "Snake"
            - label: "SwirlIn"
              value: "SwirlIn"
            - label: "SwirlOut"
              value: "SwirlOut"
            - label: "TheaterChase"
              value: "TheaterChase"
            - label: "TwinklingStars"
              value: "TwinklingStars"
      default: ""

mode: queued

trigger:
  - platform: state
    entity_id: !input toggle_helper
    to: "on"
    id: "On"
  - platform: state
    entity_id: !input toggle_helper
    to: "off"
    id: "Off"
  - platform: state
    entity_id: !input my_sensor
    id: Changes

variables:
  device_ids: !input awtrix_displays
  devices: >-
    {% macro get_device(device_id) %}
      {{ states((device_entities(device_id) | select('search','device_topic') | list)[0] | default('unknown')) }}
    {% endmacro %}

    {% set ns = namespace(devices=[]) %}
    {% for device_id in device_ids %}
      {% set device=get_device(device_id)|replace(' ','')|replace('\n','') %}
      {% set ns.devices = ns.devices + [ device ] %}
    {% endfor %}
    {{ ns.devices | reject('match','unavailable|unknown') | list }}
  my_sensor: !input my_sensor
  push_icon: !input push_icon
  text_case: !input text_case
  show_rainbow: !input show_rainbow
  background_color: !input background_color
  text_color: !input text_color
  my_toggle_helper: toggle_helper
  my_repeat: !input repeat
  my_duration: !input duration
  show_text: !input show_text
  show_temperature: !input show_temperature
  show_windspeed: !input show_windspeed
  show_humidity: !input show_humidity
  my_text: >
    {%- if (show_text) -%}
      {{ states(my_sensor) }}
    {%- endif -%}
    {%- if (show_temperature) -%}
      {{ ' ' }}{{ state_attr(my_sensor, 'temperature') }}{{state_attr(my_sensor, "temperature_unit")}}
    {%- endif -%}
    {%- if (show_windspeed) -%}
      {{ ' - ' }}{{ state_attr(my_sensor, "wind_speed" ) }}{{ state_attr(my_sensor, "wind_speed_unit") }}
    {%- endif -%}
    {%- if (show_humidity) -%}
      {{ ' - ' }}{{ state_attr(my_sensor, "humidity" ) }}%
    {%- endif -%}
  my_lifetime: !input lifetime
  switch_to_app: !input switch_to_app
  app_name: >
    {{ my_sensor | trim }}
  weather_mapper:
    rainy: 72
    cloudy: 26488
    fog: 12196
    hail: 2441
    snowy: 4702
    sunny: 2282
    windy: 3363
    lightning: 630
    pouring: 49300
    partlycloudy: 13852
    clear-night: 12181
  scrolling: !input scroll
  scroll_speed: !input scrollspeed
  effect: !input effect

action:
  - choose:
      - conditions:
          - condition: trigger
            id: "On"
        sequence:
          - repeat:
              for_each: "{{ devices }}"
              sequence:
                - service: mqtt.publish
                  data:
                    qos: 0
                    retain: false
                    topic: "{{repeat.item}}/custom/{{app_name}}"
                    payload: |-
                      {   
                        "text": "{{ my_text }}",
                        "color": {{text_color}},
                        "background": {{ background_color }},
                        "icon": "{{ states(my_sensor) }}",
                        "textCase": {{ text_case }},
                        "pushIcon": {{ push_icon }},
                        "rainbow": {{ iif(show_rainbow, "true", "false") }},
                        "repeat": {{ my_repeat }},
                        "duration": {{ my_duration }},
                        "lifetime": {{ my_lifetime }},
                        "noScroll": {{ iif(scrolling, "false", "true") }},
                        "scrollSpeed": {{ scroll_speed }},
                        "effect": "{{ effect }}"
                      }
                - service: mqtt.publish
                  data:
                    qos: 0
                    retain: false
                    topic: "{{repeat.item}}/switch"
                    payload: |-
                      {   
                        "name": "{{app_name}}"
                      }
      - conditions:
          - condition: trigger
            id: "Off"
        sequence:
          - repeat:
              for_each: "{{ devices }}"
              sequence:
                - service: mqtt.publish
                  data:
                    qos: 0
                    retain: false
                    topic: "{{repeat.item}}/custom/{{app_name}}"
      - conditions:
          - condition: and
            conditions:
              - condition: trigger
                id: Changes
              - condition: state
                entity_id: !input toggle_helper
                state: "on"
              - condition: not
                conditions:
                  - condition: state
                    entity_id: !input my_sensor
                    state:
                      - unavailable
                      - unknown
        sequence:
          - repeat:
              for_each: "{{ devices }}"
              sequence:
                - service: mqtt.publish
                  data:
                    qos: 0
                    retain: false
                    topic: "{{repeat.item}}/custom/{{app_name}}"
                    payload: |-
                      {   
                        "text": "{{ my_text }}",
                        "color": {{text_color}},
                        "background": {{ background_color }},
                        "icon": "{{ states(my_sensor) }}",
                        "textCase": {{ text_case }},
                        "pushIcon": {{ push_icon }},
                        "rainbow": {{ iif(show_rainbow, "true", "false") }},
                        "repeat": {{ my_repeat }},
                        "duration": {{ my_duration }},
                        "lifetime": {{ my_lifetime }},
                        "noScroll": {{ iif(scrolling, "false", "true") }},
                        "scrollSpeed": {{ scroll_speed }},
                        "effect": "{{ effect }}"
                      }
                - condition: template
                  value_template: "{{ switch_to_app == true }}"
                - service: mqtt.publish
                  data:
                    qos: 0
                    retain: false
                    topic: "{{repeat.item}}/switch"
                    payload: |-
                      {   
                        "name": "{{app_name}}"
                      }
